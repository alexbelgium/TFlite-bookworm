name: Build TFLite Runtime Wheels

on:
  workflow_dispatch:
  push:

env:
  TFLITE_VERSION: "2.17.1"
  BASE_IMAGE: "debian:bookworm"

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: debian:bookworm
    strategy:
      matrix:
        python_version: ["3.11"]
        arch: ["x86_64"]

    steps:
      - name: Install Git
        run: |
          apt-get update
          apt-get install -y git lsb-release wget software-properties-common gnupg
          git --version

      - name: Checkout TensorFlow
        uses: actions/checkout@v4
        with:
          repository: tensorflow/tensorflow
          submodules: true
          fetch-depth: 0
          ref: v${{ env.TFLITE_VERSION }}

      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Setup Dependencies
        shell: bash
        run: |
          set -xe
          
          apt-get update
          apt-get remove -y llvm*
          apt-get install -y polkitd build-essential lld git zip unzip pkg-config curl gcc wget

          # LVVM
          wget -qO- https://apt.llvm.org/llvm.sh | bash -s -- 17
          ln -sf /usr/bin/clang-17 /usr/bin/clang
          echo "Clang version is $(clang-17 --version)"
          
          # Bazel
          USE_BAZEL_VERSION="6.5.0"
          wget -q https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-linux-amd64 -O /usr/bin/bazel
          chmod a+x /usr/bin/bazel

          # Python
          echo "Building TFLite Runtime for ${{ matrix.arch }} / Python ${{ matrix.python }}"
          apt-get update
          apt-get install -y \
            python${{ matrix.python }} \
            python${{ matrix.python }}-dev \
            python${{ matrix.python }}-venv \
            python3-pip \
            build-essential lld git zip unzip pkg-config curl
          python3 -m venv /tmp/tflite_env
          if [ ! -d "/tmp/tflite_env/bin" ]; then
              echo "Error: Virtual environment was not created successfully."
              ls -l /tmp
              exit 1
          fi
          source /tmp/tflite_env/bin/activate
          pip install --upgrade pip wheel numpy==1.26.4 auditwheel setuptools

      - name: Configure arm64 Repositories
        if: matrix.arch == 'aarch64'
        run: |
          sed -i "s/deb\ /deb \[arch=amd64\]\ /g" /etc/apt/sources.list

      - name: Build TFLite Runtime Wheel using Docker
        shell: bash    
        run: |
          set -xe
          source /tmp/tflite_env/bin/activate
          python --version        
          export PYTHON_VERSION="${{ matrix.python }}"
          export TF_PYTHON_VERSION="$PYTHON_VERSION"
          export NUMPY_VERSION="1.24.4"
          export TENSORFLOW_TARGET="${{ matrix.arch }}"
          CUSTOM_BAZEL_FLAGS="--define=tflite_pip_with_xnnpack=true --define=tflite_pip_with_xnnpack_reshaping=true "
          CUSTOM_BAZEL_FLAGS+="--define=tflite_pip_with_flex=true "
          CUSTOM_BAZEL_FLAGS+="--copt=-O3 --linkopt=-flto --copt=-flto --define=no_tensorflow_py_deps=true --strip=always "
          CUSTOM_BAZEL_FLAGS+="--copt=-ffunction-sections --linkopt=-Wl,--gc-sections --copt=-DNDEBUG --copt=-fvisibility=hidden "
          CUSTOM_BAZEL_FLAGS+="--features=-layering_check "
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            TARGET_ARCH="aarch64"
            apt-get install -y libicu70
          else
            CUSTOM_BAZEL_FLAGS+=" --copt=-mno-avx --copt=-mno-avx2 "
            CUSTOM_BAZEL_FLAGS+="--copt=-Wno-gnu-offsetof-extensions "
            TARGET_ARCH="native"
          fi
          export CUSTOM_BAZEL_FLAGS
          export TF_PYTHON_VERSION="${{ matrix.python }}"
          export CC=clang-17
          export CXX=clang++-17
          # Insert a 'bazel clean --expunge' call before the script's normal Bazel commands
          sed -i "/^bazel/i\bazel clean --expunge" tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh
          chmod +x tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh
          ./tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh "$TARGET_ARCH"

      - name: Prepare Wheel for Upload
        run: |
          mkdir -p /home/runner/work/wheels
          WHEEL_PATH=$(find tensorflow/lite/tools/pip_package/gen/tflite_pip/python3/dist -name "*.whl" | head -n 1)
          if [[ -z "$WHEEL_PATH" ]]; then
            echo "Error: No wheel file found!"
            exit 1
          fi
          PY_TAG=$(echo ${{ matrix.python }} | sed 's/\.//g')
          echo "PY_TAG=$PY_TAG" >> $GITHUB_ENV
          NEW_WHEEL_PATH="/home/runner/work/wheels/tflite_runtime-${{ env.TFLITE_VERSION }}-cp${PY_TAG}-cp${PY_TAG}-linux_${{ matrix.arch }}.whl"
          mv "$WHEEL_PATH" "$NEW_WHEEL_PATH"
          echo "Wheel created: $NEW_WHEEL_PATH"

      - name: List Built Wheels
        run: ls -l /home/runner/work/wheels

      - name: Verify Wheel Architectures
        run: file /home/runner/work/wheels/*.whl

      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tflite_runtime-${{ env.TFLITE_VERSION }}-cp${{ env.PY_TAG }}-cp${{ env.PY_TAG }}-linux_${{ matrix.arch }}
          path: /home/runner/work/wheels/*.whl

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels

      - name: List Downloaded Wheels
        run: find wheels

      - name: Authenticate GitHub CLI
        run: gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (if not exists)
        run: |
          if gh release view ${{ env.TFLITE_VERSION }} -R "${{ github.repository }}" > /dev/null 2>&1; then
            echo "Release already exists. Skipping creation."
          else
            gh release create ${{ env.TFLITE_VERSION }} \
              -R "${{ github.repository }}" \
              --title "tflite_runtime ${{ env.TFLITE_VERSION }}" \
              --notes "Automated build for tflite_runtime ${{ env.TFLITE_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Wheels to GitHub Release
        run: |
          gh release upload ${{ env.TFLITE_VERSION }} wheels/**/*.whl --clobber -R "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
